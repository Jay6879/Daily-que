class State {
    int row;
    int col;
    int cost;
    State(int row, int col, int cost) {
        this.row = row;
        this.col = col;
        this.cost = cost;
    }
}

class Solution {
    int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}}; // Right, Left, Down, Up

    public int minCost(int[][] grid) {
        int rows = grid.length, cols = grid[0].length;
        
        // dist array to keep the current best (lowest) cost to reach each cell
        int[][] dist = new int[rows][cols];
        for (int r = 0; r < rows; r++) {
            Arrays.fill(dist[r], Integer.MAX_VALUE);
        }
        dist[0][0] = 0;
        
        // Min-heap (priority queue) for typical Dijkstra
        PriorityQueue<State> pq = new PriorityQueue<>((a, b) -> a.cost - b.cost);
        pq.offer(new State(0, 0, 0));

        while (!pq.isEmpty()) {
            State st = pq.poll();
            int cr = st.row;
            int cc = st.col;
            int currCost = st.cost;

            // If this cost is not up to date, skip
            if (currCost > dist[cr][cc]) {
                continue;
            }

            // If we reached the bottom-right, we can return immediately
            if (cr == rows - 1 && cc == cols - 1) {
                return currCost;
            }

            // Check neighbors in all four directions
            for (int i = 0; i < 4; i++) {
                int nr = cr + directions[i][0];
                int nc = cc + directions[i][1];

                // Validate neighbor
                if (nr < 0 || nr >= rows || nc < 0 || nc >= cols) {
                    continue;
                }

                // Cost is 0 if we follow the indicated direction, else 1
                int nextCost = currCost + ((i + 1 == grid[cr][cc]) ? 0 : 1);

                // If we found a cheaper route to (nr, nc), update and push to pq
                if (nextCost < dist[nr][nc]) {
                    dist[nr][nc] = nextCost;
                    pq.offer(new State(nr, nc, nextCost));
                }
            }
        }

        // If somehow we cannot reach the bottom-right (shouldn't happen in a valid grid)
        return -1;
    }
}

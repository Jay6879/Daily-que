/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    HashMap<Integer,Integer> postMap;
    int preIndex;
    public TreeNode constructFromPrePost(int[] preorder, int[] postorder) {
        postMap = new HashMap<>();

        for(int i=0;i<postorder.length;i++){
            postMap.put(postorder[i],i);
        }

        return buildTree(preorder,postorder,0,postorder.length-1);
    }

    public TreeNode buildTree(int[] preorder,int[] postorder,int postStart,int postEnd){
        if(preIndex>=preorder.length || postStart>postEnd){
            return null;
        }

        TreeNode root = new TreeNode(preorder[preIndex++]);

        if (preIndex < preorder.length && postStart < postEnd){
            int leftStartIndex = postMap.get(preorder[preIndex]);

            root.left = buildTree(preorder,postorder,postStart,leftStartIndex);
            root.right = buildTree(preorder,postorder,leftStartIndex+1,postEnd-1);
        }

        return root;
    }
}

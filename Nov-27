class State{
    int node;
    int step;
    State(int node,int step){
        this.node = node;
        this.step = step;
    }
}

class Solution {
    HashMap<Integer,List<Integer>> hmap;
    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {
        hmap = new HashMap<>();

        int[] ans = new int[queries.length];

        for(int i=0;i<n;i++){
            hmap.put(i,new ArrayList<>());
            hmap.get(i).add(i+1);
        }

        int idx = 0;
        for(int[] query:queries){
            hmap.get(query[0]).add(query[1]);
            ans[idx++] = bfs(n);
        }

        return ans;
    }

    public int bfs(int n){
        Queue<State> q = new LinkedList<>();
        HashSet<Integer> hset = new HashSet<>();

        q.add(new State(0,0));
        hset.add(0);

        while(!q.isEmpty()){
            State st = q.poll();
            int cn = st.node;
            int cs = st.step;

            if(cn==n-1){
                return cs;
            }

            for(int newNode:hmap.get(cn)){
                if(hset.contains(newNode)){
                    continue;
                }
                q.add(new State(newNode,cs+1));
                hset.add(newNode);
            }
        }

        return -1;

    }
}

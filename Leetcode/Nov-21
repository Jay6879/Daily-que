class Solution {
    public int countUnguarded(int m, int n, int[][] guards, int[][] walls) {
        int[][] grid = new int[m][n];

        
        for (int[] wall : walls) {
            int r = wall[0];
            int c = wall[1];
            grid[r][c] = 1;
        }


        for (int[] guard : guards) {
            int r = guard[0];
            int c = guard[1];
            grid[r][c] = 2; 
        }

       
        int[][] directions = {
            {0, -1}, 
            {0, 1},  
            {-1, 0},
            {1, 0}
        };

        
        for (int[] guard : guards) {
            int r = guard[0];
            int c = guard[1];

            for (int[] dir : directions) {
                int x = r + dir[0];
                int y = c + dir[1];

                while (x >= 0 && x < m && y >= 0 && y < n) {
                    
                    if (grid[x][y] == 1 || grid[x][y] == 2) {
                        break;
                    }

                   
                    if (grid[x][y] == 0) {
                        grid[x][y] = 3; 
                    }

                    x += dir[0];
                    y += dir[1];
                }
            }
        }

        int unguardedCount = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    unguardedCount++;
                }
            }
        }

        return unguardedCount;
    }
}

class Solution {
    int[] days;
    int[] costs;
    int[][] memo;
    public int mincostTickets(int[] days, int[] costs) {
        this.days = days;
        this.costs = costs;
        memo = new int[days.length][366];

        for(int i=0;i<days.length;i++){
            Arrays.fill(memo[i],-1);
        }

        return dp(0,0);

    }

    public int dp(int idx,int daysUntil){
        if(idx>=days.length){
            return 0;
        }

        if(daysUntil>=days[idx]){
            return dp(idx+1,daysUntil);
        }

        if(memo[idx][daysUntil]!=-1){
            return memo[idx][daysUntil];
        }

        int cost = Integer.MAX_VALUE;

        int oneDay = costs[0]+dp(idx+1,days[idx]);
        int sevenDay =costs[1]+ dp(idx+1,days[idx]+6);
        int thirtyDay = costs[2]+ dp(idx+1,days[idx]+29);
        cost = Math.min(oneDay,Math.min(sevenDay,thirtyDay));

        memo[idx][daysUntil]  = cost;

        return memo[idx][daysUntil];
    }
}

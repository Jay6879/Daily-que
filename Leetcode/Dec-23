class Solution {
    public int minimumOperations(TreeNode root) {
        int count = 0;

        Queue<TreeNode> q = new LinkedList<>();

        q.add(root);

        while(!q.isEmpty()){
            int n = q.size();

            int[] al = new int[n];

            for(int i=0;i<n;i++){

                TreeNode node = q.poll();

                al[i] = node.val;

                if(node.left!=null){
                    q.add(node.left);
                }

                if(node.right!=null){
                    q.add(node.right);
                }
            }

            count+=minOperations(al);
        }

        return count;
    }

    public int minOperations(int[] al){
        int swaps = 0;
        
        int[] target = al.clone();

        Arrays.sort(target);

        HashMap<Integer,Integer> hmap = new HashMap<>();

        for(int i=0;i<target.length;i++){
            hmap.put(al[i],i);
        }

        for(int i=0;i<al.length;i++){
            if(al[i]!=target[i]){
                swaps++;

                int curPos = hmap.get(target[i]);
                hmap.put(al[i],curPos);
                al[curPos] = al[i];
            }
        }

        return swaps;
    }
}
